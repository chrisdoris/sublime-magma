%YAML 1.2
---
# TODO:
# - highlight constructor name if possible
# - special constructors (rec, recformat, hom, map, etc?)
# - Sprintf
# - regular expression syntax (with escapes!)

name: Magma (experimental)
file_extensions: [magma, mag]
scope: source.magma-experimental

variables:
  escape_char: \\.
  format_char: '%[-]?[0-9]*(\.[0-9]*)?[oOmh]|%\*[oOmh]|%%'
  bad_format_char: '%'
  base_identifier: '\b[a-zA-Z_][a-zA-Z_0-9]*\b'
  reserved_word: '\b(_|adj|and|assert|assert2|assert3|assigned|break|by|case|cat|catch|clear|cmpeq|cmpne|continue|declare|default|delete|diff|div|do|elif|else|end|eq|error|eval|exists|exit|false|for|forall|forward|fprintf|freeze|function|ge|gt|if|iload|import|in|intrinsic|is|join|le|load|local|lt|meet|mod|ne|not|notadj|notin|notsubset|or|print|printf|procedure|quit|random|read|readi|rep|repeat|require|requirege|requirerange|restore|return|save|sdiff|select|subset|then|time|to|true|try|until|vprint|vprintf|vtime|when|where|while|xor)\b'
  identifier: '(?!{{reserved_word}}){{base_identifier}}'
  historyvar: '\$[0-9]+\b'
  comma: ','
  colon: ':(?![:=])'
  seq_open: '\['
  seq_close: '\]'
  iset_open: '\{@'
  iset_close: '@\}'
  mset_open: '\{\*'
  mset_close: '\*\}'
  list_open: '\[\*'
  list_close: '\*\]'
  set_open: '\{(?![@\*])'
  set_close: '(?<![@\*])\}'
  bar: '\|'
  tuple_open: '<'
  tuple_close: '>'
  paren_open: '\('
  paren_close: '\)'
  assign: ':='
  index_open: '{{seq_open}}'
  index_close: '{{seq_close}}'
  constructor_open: '{{tuple_open}}'
  constructor_close: '{{tuple_close}}'
  backtick: '`'
  string_open: '"'
  string_close: '"'
  dot: '\.(?![.])'
  dotdot: '\.\.(?![.])'
  dotdotdot: '\.\.\.'
  semicolon: ';'
  plus: '\+'
  minus: '-(?![>])'
  divide: '/(?![/])'
  multiply: '\*(?![\]\}])'
  power: '\^'
  arithmetic_operator: '({{plus}}|{{minus}}|{{multiply}}|{{divide}}|{{power}})(?![:\}])'
  tilde: '~'
  symbol: "'[^']*'"
  integer: '\b[0-9]+\b'
  argtype: '::'
  setseq_open: '{{set_open}}{{seq_open}}'
  setseq_close: '{{seq_close}}{{set_close}}'
  arrow: '->'
  mapsto: ':->'
  hash: '#'
  ampersand: '&'
  bang: '!'
  at: '@(?![@])'
  atat: '@'
  anychar: '.'
  LF_anychar: '(?={{anychar}})'
  equals: '='


contexts:

  # MAIN

  main:
    - include: statement

  statement:
    - include: print_statement
    - include: vprint_statement
    - include: printf_statement
    - include: vprintf_statement
    - include: fprintf_statement
    - include: delete_statement
    - include: clear_statement
    - include: freeze_statement
    - include: exit_statement
    - include: quit_statement
    - include: import_statement
    - include: time_statement
    - include: vtime_statement
    - include: assert_statement
    - include: assert2_statement
    - include: assert3_statement
    - include: error_statement
    - include: read_statement
    - include: readi_statement
    - include: local_statement
    - include: forward_statement
    - include: declare_statement
    - include: if_statement
    - include: case_statement
    - include: while_statement
    - include: repeat_statement
    - include: for_statement
    - include: load_statement
    - include: iload_statement
    - include: save_statement
    - include: restore_statement
    - include: intrinsic_statement
    - include: function_statement
    - include: procedure_statement
    - include: return_statement
    - include: break_statement
    - include: continue_statement
    - include: require_statement
    - include: requirerange_statement
    - include: requirege_statement
    - include: try_statement
    - include: history_statement
    - include: help_statement
    - include: help_browser_statement
    - include: assignment_or_expression_statement

  expression:
    - include: literal
    - include: logical_operator
    - include: comparison_operator
    - include: arithmetic_operator
    - include: other_operator
    - include: where_expression
    - include: select_expression
    - include: function_expression
    - include: procedure_expression
    - include: eval_expression
    - include: assigned_expression
    - include: forall_expression
    - include: exists_expression
    - include: random_expression
    - include: rep_expression
    - include: case_expression
    - include: sprintf_call
    - include: parentheses
    - include: aggregate
    - include: constructor
    - include: underscore
    - include: history_variable
    - include: identifier
    - include: illegal

  literal:
    - include: string_literal
    - include: number_literal
    - include: symbol_literal
    - include: boolean_literal

  aggregate:
    - include: mset
    - include: iset
    - include: set
    - include: list
    - include: seq
    - include: tuple

  # UTILS

  illegal:
    - match: '{{anychar}}'
      scope: invalid.illegal.magma

  POP:
    - match: ''
      pop: true

  string_chars:
    - match: '{{escape_char}}'
      scope: constant.character.escape.magma
    - match: '{{format_char}}'
      scope: constant.character.escape.magma

  format_string_chars:
    - include: string_chars
    - match: '{{bad_format_char}}'
      scope: invalid.illegal.magma

  # PROTOTYPE (WHITESPACE AND COMMENTS)

  prototype:
    - include: space

  space:
    - include: comment
    - include: whitespace

  comment:
    - include: line_comment
    - include: block_comment

  whitespace:
    - match: \s+

  line_comment:
    - match: //.*$\n?
      scope: comment.line.double-slash.magma

  block_comment:
    - match: /\*
      push:
        - meta_scope: comment.block.magma
        - match: \*/
          pop: true

  # LITERALS

  string_literal:
    - match: '{{string_open}}'
      push:
        - meta_scope: string.quoted.double.magma
        - meta_include_prototype: false
        - include: string_chars
        - match: '{{string_close}}'
          set: OPT_post_operator_POP

  number_literal:
    - match: '[+-]?[0-9]+(\.[0-9]+)?([eE][-+]?[0-9]+)?([pP][0-9]+)?\b'
      scope: constant.numeric.magma
      push: OPT_post_operator_POP

  symbol_literal:
    - match: '{{symbol}}'
      scope: constant.language.symbol.magma
      push: OPT_post_operator_POP

  boolean_literal:
    - match: '\b(true|false)\b'
      scope: constant.language.boolean.magma
      push: OPT_post_operator_POP

  # IDENTIFIER

  identifier:
    - match: '{{identifier}}'
      scope: meta.identifier.magma variable.other
      push: OPT_post_operator_POP

  # POST OPERATOR

  OPT_post_operator_POP:
    - include: function_call_operator_POP
    - include: indexing_operator_POP
    - include: backtick_operator_POP
    - include: doublequote_operator_POP
    - include: dot_operator_POP
    - include: constructor_operator_POP
    - include: arithmetic_post_operator_POP
    - include: POP

  arithmetic_post_operator_POP:
    - match: '{{arithmetic_operator}}'
      scope: keyword.operator.magma meta.operator.arithmetic.magma
      pop: true

  constructor_operator_POP:
    - match: '{{constructor_open}}'
      set:
        - constructor_METASCOPE_POP
        - constructor_operator_AFTER_open_POP

  constructor_METASCOPE_POP:
    - meta_scope: meta.operator.constructor.magma
    - include: POP

  constructor_operator_AFTER_open_POP:
    - match: '{{arrow}}'
    - match: '{{mapsto}}'
    - match: '{{bar}}'
    - match: '{{assign}}'
    - match: '{{colon}}'
    - match: '{{constructor_close}}'
      set: OPT_post_operator_POP
    - include: expression_list

  function_call_operator_POP:
    - match: '{{paren_open}}'
      set:
        - function_call_METASCOPE_POP
        - function_call_operator_2_POP

  function_call_METASCOPE_POP:
    - meta_scope: meta.operator.function_call.magma
    - include: POP

  function_call_operator_2_POP:
    - match: '{{paren_close}}'
      set: OPT_post_operator_POP
    - include: REQ_function_call_arguments_POP

  REQ_function_call_arguments_POP:
    - match: '{{paren_close}}'
      set: OPT_post_operator_POP
    - match: '{{colon}}'
      set: REQ_function_call_optional_arguments_POP
    - match: '{{comma}}'
    - include: expression

  REQ_function_call_optional_arguments_POP:
    - match: '{{paren_close}}'
      set: OPT_post_operator_POP
    - match: '{{identifier}}'
      scope: variable.parameter.magma
      set:
        - match: '{{assign}}'
          scope: keyword.operator.assignment.magma
          set:
            - match: '{{comma}}'
              set: REQ_function_call_optional_arguments_POP
            - match: '{{paren_close}}'
              set: OPT_post_operator_POP
            - include: expression
        - include: illegal
    - include: illegal

  REQ_function_call_next_arguments_POP:
    - match: '{{paren_close}}'
      set: OPT_post_operator_POP
    - match: '{{colon}}'
      set: REQ_function_call_optional_arguments_POP
    - match: '{{comma}}'
      set: REQ_function_call_arguments_POP
    - include: illegal

  indexing_operator_POP:
    - match: '{{index_open}}'
      set:
        - meta_scope: meta.operator.indexing.magma
        - match: '{{index_close}}'
          set: OPT_post_operator_POP
        - include: expression

  backtick_operator_POP:
    - match: '{{backtick}}'
      scope: keyword.operator.magma
      set:
        - meta_scope: meta.operator.backtick.magma
        - match: '{{identifier}}'
          set: OPT_post_operator_POP
        - include: illegal

  doublequote_operator_POP:
    - match: '"'
      scope: keyword.operator.magma meta.operator.doublequote.magma
      pop: true

  dot_operator_POP:
    - match: '{{dot}}'
      scope: keyword.operator.magma meta.operator.dot.magma
      pop: true

  # WHERE

  where_expression:
    - match: '\bwhere\b'
      scope: keyword.other.magma
      push:
        - meta_scope: meta.expression.where.magma
        - match: '\bis\b'
          scope: keyword.other.magma
          pop: true
        - match: '{{assign}}'
          scope: keyword.operator.assignment.magma
          pop: true
        - include: expression_list

  # PRINT

  print_statement:
    - match: '\bprint\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - print_args_POP

  print_args_POP:
    - match: '{{semicolon}}'
      pop: true
    - match: '{{comma}}'
    - include: print_level_POP
    - include: expression

  print_level_POP:
    - match: '{{colon}}'
      set:
        - match: '\b(Default|Minimal|Maximal|Magma)\b'
          scope: keyword.other.magma
          set: REQ_blank_statement_POP
        - include: illegal

  # VPRINT

  vprint_statement:
    - match: '\bvprint\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP
        - REQ_verbosity_specifier_POP

  REQ_verbosity_specifier_POP:
    - match: '{{identifier}}'
      scope: entity.name.class.verbosity.magma
      set: expression_list_colon_POP
    - include: illegal

  # PRINTF

  printf_statement:
    - match: '\bprintf\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP
        - OPT_format_string_literal_POP

  expression_list_statement_POP:
    - match: '{{comma}}'
    - match: '{{semicolon}}'
      pop: true
    - include: expression

  OPT_format_string_literal_POP:
    - match: '{{string_open}}'
      set:
        - meta_scope: string.quoted.double.magma
        - meta_include_prototype: false
        - include: format_string_chars
        - match: '{{string_close}}'
          pop: true
    - include: POP

  # VPRINTF

  vprintf_statement:
    - match: '\bvprintf\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP
        - OPT_format_string_literal_POP
        - REQ_verbosity_specifier_POP

  # FPRINTF

  fprintf_statement:
    - match: '\bfprintf\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP

  # TIME

  time_statement:
    - match: '\btime\b'
      scope: keyword.other.magma

  # VTIME

  vtime_statement:
    - match: '\bvtime\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - REQ_verbosity_specifier_POP

  # DELETE

  delete_statement:
    - match: '\bdelete\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - REQ_blank_statement_POP
        - REQ_identifier_POP

  REQ_identifier_POP:
    - match: '{{identifier}}'
      pop: true
    - include: illegal


  # CLEAR

  clear_statement:
    - match: '\bclear\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - REQ_blank_statement_POP

  # FREEZE

  freeze_statement:
    - match: '\bfreeze\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - REQ_blank_statement_POP

  REQ_blank_statement_POP:
    - match: '{{semicolon}}'
      pop: true
    - include: illegal

  # EXIT

  exit_statement:
    - match: '\bexit\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - REQ_blank_statement_POP

  # QUIT

  quit_statement:
    - match: '\bquit\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - REQ_blank_statement_POP

  # ASSERT

  assert_statement:
    - match: '\bassert\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP

  # ASSERT2

  assert2_statement:
    - match: '\bassert2\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP

  # ASSERT3

  assert3_statement:
    - match: '\bassert3\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP

  # ERROR

  error_statement:
    - match: '\berror\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP

  # IMPORT

  import_statement:
    - match: '\bimport\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - ident_list_statement_POP
        - expression_list_colon_POP

  ident_list_statement_POP:
    - match: '{{identifier}}'
      set:
        - match: '{{semicolon}}'
          pop: true
        - match: '{{comma}}'
          set: ident_list_statement_POP
        - include: illegal
    - include: illegal

  expression_list:
    - match: '{{comma}}'
    - include: expression

  expression_list_colon_POP:
    - match: '{{colon}}'
      pop: true
    - include: expression_list

  # READ

  read_statement:
    - match: '\bread\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP
        - REQ_identifier_POP

  # READI

  readi_statement:
    - match: '\breadi\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP
        - REQ_identifier_POP

  # LOCAL

  local_statement:
    - match: '\blocal\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - REQ_blank_statement_POP
        - REQ_identifier_POP

  # FORWARD

  forward_statement:
    - match: '\bforward\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - REQ_blank_statement_POP
        - REQ_function_name_POP

  REQ_function_name_POP:
    - match: '{{identifier}}'
      scope: entity.name.function.function.magma
      pop: true
    - include: illegal

  # EVAL

  eval_expression:
    - match: '\beval\b'
      scope: keyword.other.magma

  # ASSIGNED

  assigned_expression:
    - match: '\bassigned\b'
      scope: keyword.other.magma

  # LOAD

  load_statement:
    - match: '\bload\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP

  # ILOAD

  iload_statement:
    - match: '\biload\b'
      scope: keyword.other.magma
      push:
        - statement_METASCOPE_POP
        - expression_list_statement_POP

  statement_METASCOPE_POP:
    - meta_scope: meta.statement.magma
    - include: POP

  # SAVE

  save_statement:
    - match: '\bsave\b'
      scope: keyword.other.magma
      push:
        - save_METASCOPE_POP
        - expression_list_statement_POP

  save_METASCOPE_POP:
    - meta_scope: meta.statement.save.magma
    - include: POP

  # RESTORE

  restore_statement:
    - match: '\brestore\b'
      scope: keyword.other.magma
      push:
        - restore_METASCOPE_POP
        - expression_list_statement_POP

  restore_METASCOPE_POP:
    - meta_scope: meta.statement.restore.magma
    - include: POP

  # IF

  if_statement:
    - match: '\bif\b'
      scope: keyword.other.magma
      push:
        - if_METASCOPE_POP
        - if_body_POP
        - if_then_POP

  if_METASCOPE_POP:
    - meta_scope: meta.statement.if.magma
    - include: POP

  if_then_POP:
    - match: '\bthen\b'
      scope: keyword.other.magma
      pop: true
    - include: expression

  if_body_POP:
    - match: '\belif\b'
      scope: keyword.other.magma
      set:
        - if_body_POP
        - if_then_POP
    - match: '\belse\b'
      scope: keyword.other.magma
      set: if_body_POP
    - match: '\bend\b'
      scope: keyword.other.magma
      set:
        - match: '\bif\b'
          scope: keyword.other.magma
          set: REQ_blank_statement_POP
        - include: illegal
    - include: statement

  # WHILE

  while_statement:
    - match: '\bwhile\b'
      scope: keyword.other.magma
      push:
        - while_METASCOPE_POP
        - while_body_POP
        - while_do_POP

  while_METASCOPE_POP:
    - meta_scope: meta.statement.while.magma
    - include: POP

  while_do_POP:
    - match: '\bdo\b'
      scope: keyword.other.magma
      pop: true
    - include: expression

  while_body_POP:
    - match: '\bend\b'
      scope: keyword.other.magma
      set:
        - match: '\bwhile\b'
          scope: keyword.other.magma
          set: REQ_blank_statement_POP
        - include: illegal        
    - include: statement

  # REPEAT

  repeat_statement:
    - match: '\brepeat\b'
      scope: keyword.other.magma
      push:
        - repeat_METASCOPE_POP
        - repeat_body_POP

  repeat_METASCOPE_POP:
    - meta_scope: meta.statement.repeat.magma
    - include: POP

  repeat_body_POP:
    - match: '\buntil\b'
      scope: 'keyword.other.magma'
      set: expression_list_statement_POP
    - include: statement


  expression_statement_POP:
    - match: '{{semicolon}}'
      pop: true
    - include: expression

  # OPERATORS

  logical_operator:
    - match: '\b(and|not|or|xor)\b'
      scope: keyword.operator.bool.logical.magma

  comparison_operator:
    - match: '\b(le|lt|ge|gt|eq|ne|cmpeq|cmpne|in|notin|subset|notsubset|adj|notadj)\b'
      scope: keyword.operator.comparison.magma

  arithmetic_operator:
    - match: '{{arithmetic_operator}}'
      scope: keyword.operator.arithmetic.magma

  other_operator:
    - match: '\b(div|cat|meet|join|diff|sdiff|mod|by)\b|{{hash}}|{{ampersand}}|{{backtick}}|{{bang}}|{{at}}|{{atat}}|{{dot}}|{{dotdot}}|{{dotdotdot}}|{{tilde}}|{{equals}}'
      scope: keyword.operator.other.magma

  # ASSIGNMENT OR EXPRESSION
  
  assignment_or_expression_statement:
    - match: '{{LF_anychar}}'
      push:
        - assignment_or_expression_METASCOPE_POP
        - assignment_or_expression_statement_2_POP

  assignment_or_expression_METASCOPE_POP:
    - meta_scope: meta.statement.magma
    - include: POP

  assignment_or_expression_statement_2_POP:
      - match: '(\b(div|cat|meet|join|diff|sdiff|mod|or|and|xor)|(\+|-|/|\*|^))?({{assign}})'
        scope: keyword.operator.assignment.magma
        set: expression_statement_POP
      - include: print_level_POP
      - include: expression_list_statement_POP

  # SYSCALL
  # TODO: maybe add shell highlighting to the contents?
  
  history_statement:
    - match: '(%!)(.*)$'
      captures:
        0: meta.statement.history.bang.magma
        1: keyword.other.magma
        2: meta.statement.history.bang.body.magma
    - match: '%[pPsSe]?'
      scope: keyword.other.magma
      push:
        - history_other_METASCOPE_POP
        - REQ_eol_POP
        - OPT_integer_POP
        - OPT_integer_POP
    - match: '(%)(.*)$'
      captures:
        0: meta.statement.history.other.magma
        1: keyword.other.magma
        2: meta.statement.history.other.body.magma

  history_other_METASCOPE_POP:
    - meta_scope: meta.statement.history.other.magma
    - include: POP

  OPT_integer_POP:
    - match: '{{integer}}'
      scope: constant.numeric.magma
      pop: true
    - include: POP

  REQ_eol_POP:
    - match: '$'
      pop: true
    - include: illegal

  # DECLARE
  
  declare_statement:
    - match: '\bdeclare\b'
      scope: keyword.other.magma
      push:
        - declare_METASCOPE_POP
        - declare_statement_2_POP

  declare_METASCOPE_POP:
    - meta_scope: meta.statement.declare.magma
    - include: POP

  declare_statement_2_POP:
    - include: declare_type_POP
    - include: declare_attributes_POP
    - include: declare_verbose_POP
    - include: illegal

  declare_type_POP:
    - match: '\btype\b'
      scope: keyword.other.magma
      set:
        - OPT_colon_ident_list_statement_POP
        - REQ_type_and_elttype_name_POP

  declare_attributes_POP:
    - match: '\battributes\b'
      scope: keyword.other.magma
      set:
        - OPT_colon_ident_list_statement_POP
        - REQ_type_name_POP

  declare_verbose_POP:
    - match: '\bverbose\b'
      scope: keyword.other.magma
      set:
        - REQ_semicolon_POP
        - REQ_integer_literal_POP
        - REQ_comma_POP
        - REQ_verbosity_name_POP

  REQ_semicolon_POP:
    - match: '{{semicolon}}'
      pop: true
    - include: illegal

  REQ_integer_literal_POP:
    - match: '{{integer}}'
      scope: constant.numeric.magma
      pop: true
    - include: illegal

  REQ_comma_POP:
    - match: '{{comma}}'
      pop: true
    - include: illegal

  REQ_verbosity_name_POP:
    - match: '{{identifier}}'
      scope: entity.name.class.verbosity.magma
      pop: true
    - include: illegal

  REQ_type_name_POP:
    - match: '{{identifier}}'
      scope: entity.name.class.magma
      pop: true
    - include: illegal

  REQ_type_and_elttype_name_POP:
    - match: '{{identifier}}'
      scope: entity.name.class.magma
      set:
        - match: '{{index_open}}'
          set:
            - match: '{{identifier}}'
              scope: entity.name.class.magma
              set:
                - match: '{{index_close}}'
                  pop: true
                - include: illegal
            - include: illegal
        - include: POP
    - include: illegal

  OPT_colon_ident_list_statement_POP:
    - match: '{{colon}}'
      set: ident_list_statement_POP
    - match: '{{semicolon}}'
      pop: true
    - include: illegal

  # FOR
  
  for_statement:
    - match: '\bfor\b'
      scope: keyword.other.magma
      push:
        - for_METASCOPE_POP
        - for_body_POP
        - for_range_POP

  for_METASCOPE_POP:
    - meta_scope: meta.statement.for.magma
    - include: POP

  for_body_POP:
    - match: '\bend\b'
      scope: keyword.other.magma
      set:
        - match: '\bfor\b'
          scope: keyword.other.magma
          set: REQ_blank_statement_POP
        - include: illegal
    - include: statement

  do_POP:
    - match: '\bdo\b'
      scope: keyword.other.magma
      pop: true

  for_range_POP:
    - match: '{{identifier}}'
      set:
        - match: '\bin\b'
          scope: keyword.other.magma
          set:
            - include: do_POP
            - include: expression
        - match: '{{assign}}'
          scope: keyword.operator.assignment.magma
          set:
            - match: '\bto\b'
              scope: keyword.other.magma
              set:
                - include: do_POP
                - match: '\bby\b'
                  scope: keyword.other.magma
                  set:
                    - include: do_POP
                    - include: expression
                - include: expression
            - include: expression
        - include: illegal
    - include: illegal

  # TRY

  try_statement:
    - match: '\btry\b'
      scope: keyword.other.magma
      push:
        - try_METASCOPE_POP
        - try_body_POP

  try_METASCOPE_POP:
    - meta_scope: meta.statement.try.magma
    - include: POP

  try_body_POP:
    - match: '\bcatch\b'
      scope: keyword.other.magma
      set:
        - match: '{{identifier}}'
          set:
            - match: '\bend\b'
              scope: keyword.other.magma
              set:
                - match: '\btry\b'
                  scope: keyword.other.magma
                  set: REQ_blank_statement_POP
                - include: illegal
            - include: statement
        - include: illegal
    - include: statement

  # REQUIRE
  
  require_statement:
    - match: '\brequire\b'
      scope: keyword.other.magma
      push:
        - require_METASCOPE_POP
        - require_arguments_POP

  require_METASCOPE_POP:
    - meta_scope: meta.statement.require.magma
    - include: POP

  require_arguments_POP:
    - match: '{{colon}}'
      set: expression_list_statement_POP
    - include: expression

  # REQUIRERANGE
  
  requirerange_statement:
    - match: '\brequirerange\b'
      scope: keyword.other.magma
      push:
        - requirerange_METASCOPE_POP
        - expression_list_statement_POP

  requirerange_METASCOPE_POP:
    - meta_scope: meta.statement.requirerange.magma
    - include: POP

  # REQUIREGE

  requirege_statement:
    - match: '\brequirege\b'
      scope: keyword.other.magma
      push:
        - requirege_METASCOPE_POP
        - expression_list_statement_POP

  requirege_METASCOPE_POP:
    - meta_scope: meta.statement.requirege.magma
    - include: POP

  # FUNCTION

  function_statement:
    - match: '\bfunction\b'
      scope: keyword.other.magma
      push:
        - function_METASCOPE_POP
        - REQ_blank_statement_POP
        - function_body_POP
        - REQ_function_arguments_POP
        - OPT_function_name_POP

  OPT_function_name_POP:
    - match: '{{identifier}}'
      scope: entity.name.function.function.magma
      pop: true
    - match: '{{LF_anychar}}'
      pop: true

  function_expression:
    - match: '\bfunction\b'
      scope: keyword.other.magma
      push:
        - function_expression_METASCOPE_POP
        - function_body_POP
        - REQ_function_arguments_POP

  function_METASCOPE_POP:
    - meta_scope: meta.statement.function.magma
    - include: POP

  function_expression_METASCOPE_POP:
    - meta_scope: meta.expression.function.magma
    - include: POP

  REQ_function_arguments_POP:
    - match: '{{paren_open}}'
      set:
        - match: '{{paren_close}}'
          pop: true
        - match: '{{colon}}'
          set: REQ_function_optional_arguments_POP
        - include: REQ_function_argument_list_POP
    - include: illegal

  REQ_function_argument_list_POP:
    - match: '{{identifier}}'
      scope: variable.parameter.magma
      set:
        - match: '{{comma}}'
          set: REQ_function_argument_list_POP
        - match: '{{paren_close}}'
          pop: true
        - match: '{{colon}}'
          set: REQ_function_optional_arguments_POP
        - include: illegal
    - include: illegal

  REQ_function_optional_arguments_POP:
    - match: '{{identifier}}'
      scope: variable.parameter.magma
      set:
        - match: '{{assign}}'
          set:
            - match: '{{comma}}'
              set: REQ_function_optional_arguments_POP
            - match: '{{paren_close}}'
              pop: true
            - include: expression
        - include: illegal
    - include: illegal

  function_body_POP:
    - match: '\bend\b'
      scope: keyword.other.magma
      set:
        - match: '\bfunction\b'
          scope: keyword.other.magma
          pop: true
        - include: illegal
    - include: statement

  # RETURN

  return_statement:
    - match: '\breturn\b'
      scope: keyword.other.magma
      push:
        - return_METASCOPE_POP
        - expression_list_statement_POP

  return_METASCOPE_POP:
    - meta_scope: meta.statement.return.magma
    - include: POP

  # BREAK

  break_statement:
    - match: '\bbreak\b'
      scope: keyword.other.magma
      push:
        - break_METASCOPE_POP
        - REQ_blank_statement_POP
        - OPT_ident_POP

  break_METASCOPE_POP:
    - meta_scope: meta.statement.break.magma
    - include: POP

  OPT_ident_POP:
    - match: '{{identifier}}'
      pop: true
    - match: '{{LF_anychar}}'
      pop: true

  # CONTINUE

  continue_statement:
    - match: '\bcontinue\b'
      scope: keyword.other.magma
      push:
        - continue_METASCOPE_POP
        - REQ_blank_statement_POP
        - OPT_ident_POP

  continue_METASCOPE_POP:
    - meta_scope: meta.statement.continue.magma
    - include: POP

  # PROCEDURE
  
  procedure_statement:
    - match: '\bprocedure\b'
      scope: keyword.other.magma
      push:
        - procedure_METASCOPE_POP
        - REQ_blank_statement_POP
        - procedure_body_POP
        - REQ_procedure_arguments_POP
        - OPT_procedure_name_POP

  procedure_expression:
    - match: '\bprocedure\b'
      scope: keyword.other.magma
      push:
        - procedure_expression_METASCOPE_POP
        - procedure_body_POP
        - REQ_procedure_arguments_POP

  procedure_expression_METASCOPE_POP:
    - meta_scope: meta.expression.procedure.magma
    - include: POP

  procedure_METASCOPE_POP:
    - meta_scope: meta.statement.procedure.magma
    - include: POP

  OPT_procedure_name_POP:
    - match: '{{identifier}}'
      scope: entity.name.function.procedure.magma
      pop: true
    - match: '{{LF_anychar}}'
      pop: true

  REQ_procedure_arguments_POP:
    - match: '{{paren_open}}'
      set:
        - match: '{{paren_close}}'
          pop: true
        - match: '{{colon}}'
          set: REQ_procedure_optional_arguments_POP
        - include: REQ_procedure_argument_list_POP
    - include: illegal

  REQ_procedure_argument_list_POP:
    - match: '{{identifier}}'
      scope: variable.parameter.magma
      set:
        - match: '{{comma}}'
          set: REQ_procedure_argument_list_POP
        - match: '{{paren_close}}'
          pop: true
        - match: '{{colon}}'
          set: REQ_procedure_optional_arguments_POP
        - include: illegal
    - match: '{{tilde}}'
      scope: keyword.operator.other.magma
      set:
        - match: '{{identifier}}'
          scope: variable.parameter.magma
          set:
            - match: '{{comma}}'
              set: REQ_procedure_argument_list_POP
            - match: '{{paren_close}}'
              pop: true
            - match: '{{colon}}'
              set: REQ_procedure_optional_arguments_POP
            - include: illegal
        - include: illegal
    - include: illegal

  REQ_procedure_optional_arguments_POP:
    - include: REQ_function_optional_arguments_POP

  procedure_body_POP:
    - match: '\bend\b'
      scope: keyword.other.magma
      set:
        - match: '\bprocedure\b'
          scope: keyword.other.magma
          pop: true
        - include: illegal
    - include: statement

  # INTRINSIC
  
  intrinsic_statement:
    - match: '\bintrinsic\b'
      scope: keyword.other.magma
      push:
        - intrinsic_METASCOPE_POP
        - intrinsic_body_POP
        - REQ_intrinsic_documentation_POP
        - OPT_intrinsic_return_type_POP
        - REQ_intrinsic_arguments_POP
        - REQ_intrinsic_name_POP

  intrinsic_METASCOPE_POP:
    - meta_scope: meta.statement.intrinsic.magma
    - include: POP

  REQ_intrinsic_name_POP:
    - match: "{{identifier}}|{{symbol}}"
      scope: entity.name.function.intrinsic.magma
      pop: true
    - include: illegal

  REQ_intrinsic_arguments_POP:
    - match: '{{paren_open}}'
      set:
        - match: '{{paren_close}}'
          pop: true
        - match: '{{colon}}'
          set: REQ_intrinsic_optional_argument_list_POP
        - include: REQ_intrinsic_argument_list_POP

  REQ_intrinsic_argument_list_POP:
    - match: '{{tilde}}'
      scope: keyword.operator.other.magma
      set: REQ_intrinsic_argument_list_2_POP
    - include: REQ_intrinsic_argument_list_2_POP

  REQ_intrinsic_argument_list_2_POP:
    - match: '{{identifier}}'
      scope: variable.parameter.magma
      set:
        - REQ_intrinsic_next_argument_POP
        - OPT_intrinsic_argument_type_POP
    - include: illegal

  OPT_intrinsic_argument_type_POP:
    - match: '{{argtype}}'
      set: REQ_type_POP
    - include: POP

  type_POP:
    - include: any_type_POP
    - include: iset_type_POP
    - include: mset_type_POP
    - include: tuple_type_POP
    - include: setseq_type_POP
    - include: simple_type_POP
    - include: sequence_type_POP
    - include: set_type_POP
    - include: seq_type_POP

  REQ_type_POP:
    - include: type_POP
    - include: illegal

  any_type_POP:
    - match: '{{dot}}'
      scope: entity.name.class.any.magma
      pop: true

  simple_type_POP:
    - match: '{{identifier}}'
      scope: entity.name.class.magma
      set:
        - match: '{{index_open}}'
          set:
            - match: '{{index_close}}'
              pop: true
            - include: type_list
            - include: illegal
        - include: POP

  type_list:
    - match: '{{LF_anychar}}'
      push: type_POP

  iset_type_POP:
    - match: '{{iset_open}}'
      scope: entity.name.class.iset.magma
      set:
        - match: '{{iset_close}}'
          scope: entity.name.class.iset.magma
          pop: true
        - include: type_list
        - include: illegal

  mset_type_POP:
    - match: '{{mset_open}}'
      scope: entity.name.class.mset.magma
      set:
        - match: '{{mset_close}}'
          scope: entity.name.class.mset.magma
          pop: true
        - include: type_list
        - include: illegal

  tuple_type_POP:
    - match: '{{tuple_open}}'
      scope: entity.name.class.tuple.magma
      set:
        - match: '{{tuple_close}}'
          scope: entity.name.class.tuple.magma
          pop: true
        - include: type_list
        - include: illegal

  setseq_type_POP:
    - match: '{{setseq_open}}'
      scope: entity.name.class.setseq.magma
      set:
        - match: '{{setseq_close}}'
          scope: entity.name.class.setseq.magma
          pop: true
        - include: type_list
        - include: illegal

  set_type_POP:
    - match: '{{set_open}}'
      scope: entity.name.class.set.magma
      set:
        - match: '{{set_close}}'
          scope: entity.name.class.set.magma
          pop: true
        - include: type_list
        - include: illegal

  seq_type_POP:
    - match: '{{seq_open}}'
      scope: entity.name.class.seq.magma
      set:
        - match: '{{seq_close}}'
          scope: entity.name.class.seq.magma
          pop: true
        - include: type_list
        - include: illegal

  REQ_intrinsic_next_argument_POP:
    - match: '{{comma}}'
      set: REQ_intrinsic_argument_list_POP
    - match: '{{colon}}'
      set: REQ_intrinsic_optional_argument_list_POP
    - match: '{{paren_close}}'
      pop: true
    - include: illegal

  OPT_intrinsic_return_type_POP:
    - match: '->'
      set:
        - OPT_intrinsic_return_type_next_POP
        - REQ_type_POP
    - match: '(?=\{)'
      pop: true
    - include: illegal

  OPT_intrinsic_return_type_next_POP:
    - match: '{{comma}}'
      set:
        - OPT_intrinsic_return_type_next_POP
        - REQ_type_POP
    - match: '(?=\{)'
      pop: true
    - include: illegal

  REQ_intrinsic_documentation_POP:
    - match: '(\{\s*(")\s*\})'
      captures:
        1: comment.block.documentation.intrinsic.magma
        2: constant.character.escape.magma
      pop: true
    - match: '\{'
      set:
        - meta_scope: comment.block.documentation.intrinsic.magma
        - match: '\\.'
          scope: constant.character.escape.magma
        - match: '\}'
          pop: true
    - include: illegal

  REQ_intrinsic_optional_argument_list_POP:
    - include: REQ_function_optional_arguments_POP

  intrinsic_body_POP:
    - match: '\bend\b'
      scope: keyword.other.magma
      set:
        - match: '\bintrinsic\b'
          scope: keyword.other.magma
          set: REQ_blank_statement_POP
        - include: illegal
    - include: statement

  # CASE

  case_expression:
    - match: '\bcase\b'
      scope: keyword.other.magma
      push:
        - match: '{{constructor_open}}'
          set:
            - OPT_post_operator_POP
            - constructor_METASCOPE_POP
            - case_expression_args_POP
        - include: illegal

  case_expression_args_POP:
    - match: '{{bar}}'
      set: case_expression_cases_POP
    - include: expression

  case_expression_cases_POP:
    - match: '\bdefault\b'
      scope: keyword.other.magma
      set:
        - match: '{{colon}}'
          set:
            - match: '{{constructor_close}}'
              pop: true
            - include: expression
        - include: illegal
    - match: '{{LF_anychar}}'
      set:
        - match: '{{colon}}'
          set:
            - match: '{{comma}}'
              set: case_expression_cases_POP
            - include: expression
        - include: expression

  case_statement:
    - match: '\bcase\b'
      scope: keyword.other.magma
      push:
        - match: '{{constructor_open}}'
          set:
            - expression_statement_POP
            - OPT_post_operator_POP
            - constructor_METASCOPE_POP
            - case_expression_args_POP
        - match: '{{LF_anychar}}'
          set:
            - case_METASCOPE_POP
            - case_body_POP
            - case_args_POP

  case_METASCOPE_POP:
    - meta_scope: meta.statement.case.magma
    - include: POP

  case_body_POP:
    - match: '\bend\b'
      scope: keyword.other.magma
      set:
        - match: '\bcase\b'
          scope: keyword.other.magma
          set: REQ_blank_statement_POP
        - include: illegal
    - match: '\bwhen\b'
      scope: keyword.other.magma
      set:
        - match: '{{colon}}'
          set: case_body_POP
        - include: expression
    - match: '\belse\b'
      scope: keyword.other.magma
      set: case_body_POP
    - include: statement

  case_args_POP:
    - match: '{{colon}}'
      pop: true
    - include: expression

  # SPRINTF CALL

  # sprintf_call:
  #   - match: '\bSprintf\b'
  #     push:
  #       - match: '{{paren_open}}'
  #         set:
  #           - match: '"'
  #             set:
  #               - meta_scope: string.quoted.double.magma
  #               - meta_include_prototype: false
  #               - include: format_string_chars
  #               - match: '"'
  #                 set: REQ_function_call_next_arguments_POP
  #           - match: '\)'
  #             set: OPT_post_operator_POP
  #           - include: REQ_function_call_arguments_POP
  #       - include: OPT_post_operator_POP

  # PARENTHESES (OR PERMUTATION LITERAL)

  parentheses:
    - match: '{{paren_open}}'
      push:
        - parentheses_METASCOPE_POP
        - parentheses_2_POP

  parentheses_METASCOPE_POP:
    - meta_scope: meta.expression.parentheses.magma
    - include: POP

  parentheses_2_POP:
    - match: '{{paren_close}}'
      set: OPT_post_operator_POP
    - match: '{{comma}}'
      set: permutation_literal_2_POP
    - include: expression

  permutation_literal_2_POP:
    - match: '{{paren_close}}'
      set:
        - match: '{{paren_open}}'
          set: permutation_literal_2_POP
        - match: '{{LF_anychar}}'
          set: OPT_post_operator_POP
    - match: '{{comma}}'
    - include: expression

  # SET {}

  set:
    - match: '{{set_open}}'
      push:
        - OPT_post_operator_POP
        - set_METASCOPE_POP
        - set_AT_universe_or_value_POP

  set_METASCOPE_POP:
    - meta_scope: meta.expression.set.magma
    - include: POP

  set_AT_universe_or_value_POP:
    - match: '{{bar}}'
      set: set_AT_value_POP
    - match: '{{colon}}'
      set: set_AT_quantifier_POP
    - match: '{{comma}}'
      set: set_AT_list_POP
    - match: '{{set_close}}'
      pop: true
    - include: expression

  set_AT_value_POP:
    - match: '{{colon}}'
      set: set_AT_quantifier_POP
    - match: '{{set_close}}'
      pop: true
    - match: '{{comma}}'
      set: set_AT_list_POP
    - include: expression

  set_AT_list_POP:
    - match: '{{set_close}}'
      pop: true
    - include: expression_list

  set_AT_quantifier_POP:
    - match: ''
      set:
        - set_AT_next_quantifier_POP
        - REQ_quantifier_POP

  set_AT_next_quantifier_POP:
    - match: '{{comma}}'
      set: set_AT_quantifier_POP
    - match: '{{bar}}'
      set: set_AT_condition_POP
    - match: '{{set_close}}'
      pop: true
    - include: expression

  set_AT_condition_POP:
    - match: '{{set_close}}'
      pop: true
    - include: expression
    
  quantifier_POP:
    - match: '{{identifier}}'
      scope: variable.other
      set:
        - match: '\bin\b'
          scope: keyword.other.magma
          pop: true
        - include: illegal

  REQ_quantifier_POP:
    - include: quantifier_POP
    - include: illegal

  OPT_quantifier_POP:
    - include: quantifier_POP
    - include: POP

  # SEQ []

  seq:
    - match: '{{seq_open}}'
      push:
        - OPT_post_operator_POP
        - seq_METASCOPE_POP
        - seq_AT_universe_or_value_POP

  seq_METASCOPE_POP:
    - meta_scope: meta.expression.seq.magma
    - include: POP

  seq_AT_universe_or_value_POP:
    - match: '{{bar}}'
      set: seq_AT_value_POP
    - match: '{{colon}}'
      set: seq_AT_quantifier_POP
    - match: '{{comma}}'
      set: seq_AT_list_POP
    - match: '{{seq_close}}'
      pop: true
    - include: expression

  seq_AT_value_POP:
    - match: '{{colon}}'
      set: seq_AT_quantifier_POP
    - match: '{{seq_close}}'
      pop: true
    - match: '{{comma}}'
      set: seq_AT_list_POP
    - include: expression

  seq_AT_list_POP:
    - match: '{{seq_close}}'
      pop: true
    - include: expression_list

  seq_AT_quantifier_POP:
    - match: ''
      set:
        - seq_AT_next_quantifier_POP
        - REQ_quantifier_POP

  seq_AT_next_quantifier_POP:
    - match: '{{comma}}'
      set: seq_AT_quantifier_POP
    - match: '{{bar}}'
      set: seq_AT_condition_POP
    - match: '{{seq_close}}'
      pop: true
    - include: expression

  seq_AT_condition_POP:
    - match: '{{seq_close}}'
      pop: true
    - include: expression


  # ISET {@@}

  iset:
    - match: '{{iset_open}}'
      push:
        - OPT_post_operator_POP
        - iset_METASCOPE_POP
        - iset_AT_universe_or_value_POP

  iset_METASCOPE_POP:
    - meta_scope: meta.expression.iset.magma
    - include: POP

  iset_AT_universe_or_value_POP:
    - match: '{{bar}}'
      set: iset_AT_value_POP
    - match: '{{colon}}'
      set: iset_AT_quantifier_POP
    - match: '{{comma}}'
      set: iset_AT_list_POP
    - match: '{{iset_close}}'
      pop: true
    - include: expression

  iset_AT_value_POP:
    - match: '{{colon}}'
      set: iset_AT_quantifier_POP
    - match: '{{iset_close}}'
      pop: true
    - match: '{{comma}}'
      set: iset_AT_list_POP
    - include: expression

  iset_AT_list_POP:
    - match: '{{iset_close}}'
      pop: true
    - include: expression_list

  iset_AT_quantifier_POP:
    - match: ''
      set:
        - iset_AT_next_quantifier_POP
        - REQ_quantifier_POP

  iset_AT_next_quantifier_POP:
    - match: '{{comma}}'
      set: iset_AT_quantifier_POP
    - match: '{{bar}}'
      set: iset_AT_condition_POP
    - match: '{{iset_close}}'
      pop: true
    - include: expression

  iset_AT_condition_POP:
    - match: '{{iset_close}}'
      pop: true
    - include: expression
    
  # MSET {**}

  mset:
    - match: '{{mset_open}}'
      push:
        - OPT_post_operator_POP
        - mset_METASCOPE_POP
        - mset_AT_universe_or_value_POP

  mset_METASCOPE_POP:
    - meta_scope: meta.expression.mset.magma
    - include: POP

  mset_AT_universe_or_value_POP:
    - match: '{{bar}}'
      set: mset_AT_value_POP
    - match: '{{colon}}'
      set: mset_AT_quantifier_POP
    - match: '{{comma}}'
      set: mset_AT_list_POP
    - match: '{{mset_close}}'
      pop: true
    - include: expression

  mset_AT_value_POP:
    - match: '{{colon}}'
      set: mset_AT_quantifier_POP
    - match: '{{mset_close}}'
      pop: true
    - match: '{{comma}}'
      set: mset_AT_list_POP
    - include: expression

  mset_AT_list_POP:
    - match: '{{mset_close}}'
      pop: true
    - include: expression_list

  mset_AT_quantifier_POP:
    - match: ''
      set:
        - mset_AT_next_quantifier_POP
        - REQ_quantifier_POP

  mset_AT_next_quantifier_POP:
    - match: '{{comma}}'
      set: mset_AT_quantifier_POP
    - match: '{{bar}}'
      set: mset_AT_condition_POP
    - match: '{{mset_close}}'
      pop: true
    - include: expression

  mset_AT_condition_POP:
    - match: '{{mset_close}}'
      pop: true
    - include: expression

    
  # TUPLE <>

  tuple:
    - match: '{{tuple_open}}'
      push:
        - OPT_post_operator_POP
        - tuple_METASCOPE_POP
        - tuple_AT_value_POP

  tuple_METASCOPE_POP:
    - meta_scope: meta.expression.tuple.magma
    - include: POP

  tuple_AT_value_POP:
    - match: '{{colon}}'
      set: tuple_AT_quantifier_POP
    - match: '{{tuple_close}}'
      pop: true
    - match: '{{comma}}'
      set: tuple_AT_list_POP
    - include: expression

  tuple_AT_list_POP:
    - match: '{{tuple_close}}'
      pop: true
    - include: expression_list

  tuple_AT_quantifier_POP:
    - match: ''
      set:
        - tuple_AT_next_quantifier_POP
        - REQ_quantifier_POP

  tuple_AT_next_quantifier_POP:
    - match: '{{comma}}'
      set: tuple_AT_quantifier_POP
    - match: '{{bar}}'
      set: tuple_AT_condition_POP
    - match: '{{tuple_close}}'
      pop: true
    - include: expression

  tuple_AT_condition_POP:
    - match: '{{tuple_close}}'
      pop: true
    - include: expression


  # LIST [**]

  list:
    - match: '{{list_open}}'
      push:
        - OPT_post_operator_POP
        - list_METASCOPE_POP
        - list_AT_value_POP

  list_METASCOPE_POP:
    - meta_scope: meta.expression.list.magma
    - include: POP

  list_AT_value_POP:
    - match: '{{colon}}'
      set: list_AT_quantifier_POP
    - match: '{{list_close}}'
      pop: true
    - match: '{{comma}}'
      set: list_AT_list_POP
    - include: expression

  list_AT_list_POP:
    - match: '{{list_close}}'
      pop: true
    - include: expression_list

  list_AT_quantifier_POP:
    - match: ''
      set:
        - list_AT_next_quantifier_POP
        - REQ_quantifier_POP

  list_AT_next_quantifier_POP:
    - match: '{{comma}}'
      set: list_AT_quantifier_POP
    - match: '{{bar}}'
      set: list_AT_condition_POP
    - match: '{{list_close}}'
      pop: true
    - include: expression

  list_AT_condition_POP:
    - match: '{{list_close}}'
      pop: true
    - include: expression


  # FORALL

  forall_expression:
    - match: '\bforall\b'
      scope: keyword.other.magma
      push:
        - forall_METASCOPE_POP
        - REQ_quantified_set_POP
        - OPT_paren_ident_list_paren_POP

  forall_METASCOPE_POP:
    - meta_scope: meta.expression.forall.magma
    - include: POP

  OPT_paren_ident_list_paren_POP:
    - match: '{{paren_open}}'
      set:
        - match: '{{paren_close}}'
          pop: true
        - match: ''
          set: REQ_ident_list_paren_POP
    - include: POP

  REQ_ident_list_paren_POP:
    - match: '{{identifier}}'
      scope: variable.other
      set:
        - match: '{{comma}}'
          set: REQ_ident_list_paren_POP
        - match: '{{paren_close}}'
          pop: true
        - include: illegal
    - include: illegal

  REQ_quantified_set_POP:
    - match: '{{set_open}}'
      set: quantified_set_start_POP
    - include: illegal

  quantified_set_start_POP:
    - match: '{{colon}}'
      set:
        - quantified_set_middle_POP
        - REQ_quantifier_POP
    - include: quantified_set_end_POP

  quantified_set_middle_POP:
    - match: '{{comma}}'
      set:
        - quantified_set_middle_POP
        - REQ_quantifier_POP
    - match: '{{bar}}'
      set: quantified_set_end_POP
    - include: quantified_set_end_POP

  quantified_set_end_POP:
    - match: '{{set_close}}'
      set: OPT_post_operator_POP
    - include: expression

  # EXISTS

  exists_expression:
    - match: '\bexists\b'
      scope: keyword.other.magma
      push:
        - exists_METASCOPE_POP
        - REQ_quantified_set_POP
        - OPT_paren_ident_list_paren_POP

  exists_METASCOPE_POP:
    - meta_scope: meta.expression.exists.magma
    - include: POP

  # RANDOM

  random_expression:
    - match: '\brandom\b'
      scope: keyword.other.magma
      push:
        - random_METASCOPE_POP
        - REQ_quantified_set_POP

  random_METASCOPE_POP:
    - meta_scope: meta.expression.random.magma
    - include: POP

  # REP

  rep_expression:
    - match: '\brep\b'
      scope: keyword.other.magma
      push:
        - rep_METASCOPE_POP
        - REQ_quantified_set_POP

  rep_METASCOPE_POP:
    - meta_scope: meta.expression.rep.magma
    - include: POP

  # UNDERSCORE

  underscore:
    - match: '\b_\b'
      scope: keyword.other.magma
      push: OPT_post_operator_POP

  # SELECT EXPRESSION

  select_expression:
    - match: '\bselect\b'
      scope: keyword.other.magma
      push:
        - select_METASCOPE_POP
        - select_expression_2_POP

  select_METASCOPE_POP:
    - meta_scope: meta.expression.select.magma
    - include: POP

  select_expression_2_POP:
    - match: '\belse\b'
      scope: keyword.other.magma
      pop: true
    - include: expression

  # RESERVED WORDS

  reserved_word:
    - match: '{{reserved_word}}'
      scope: invalid.illegal.magma

  # HELP

  help_statement:
    - match: '(\?)(?!\?).*$'
      captures:
        1: keyword.other.magma

  # HELP BROWSER

  help_browser_statement:
    - match: '(\?\?).*$'
      captures:
        1: keyword.other.magma

  # HISTORY VARIABLE

  history_variable:
    - match: '{{historyvar}}'
      scope: variable.history.magma

  # CONSTRUCTOR

  constructor:
    - match: '({{identifier}})\s*(<)'
      captures:
        1: keyword.other.magma
      push:
        - constructor_METASCOPE_POP
        - constructor_operator_AFTER_open_POP
