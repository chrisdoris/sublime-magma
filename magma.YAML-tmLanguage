# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Magma
scopeName: source.magma
fileTypes: [magma, mag]
uuid: 86b1670b-7756-4792-bdd1-1392d39d26a4

patterns:
  - include: '#block'

repository:
  function_keyword:
    comment: Function definition keywords
    begin: '\b(function|procedure)\b\s*([_A-Za-z][_A-Za-z0-9]*)\b\s*'
    end: '(?!\s*(\())(?=.)\s*'
    captures:
      '1':
        name: storage.type.function.magma
      '2':
        name: entity.name.function.magma
    patterns:
      - include: '#function_params'

  function_params:
    begin: '\(\s*'
    end: '\)\s*'
    patterns:
    - include: '#paramname'

  intrinsic_keyword:
    comment: intrinsics
    begin: '\b(intrinsic)\s+([_A-Za-z][_A-Za-z0-9]*)\b\s*'
    end: '(?!\s*(\(|{|->|:))(?=.)\s*'
    beginCaptures:
      '1':
        name: storage.type.function.magma
      '2':
        name: entity.name.function.magma
    patterns:
    - include: '#intrinsic_params_return_docstring'

  intrinsic_params_return_docstring:
    patterns:
    - include: '#intrinsic_params'
    - include: '#intrinsic_optparams'
    - include: '#intrinsic_returntypes'
    - include: '#intrinsic_docstring'
        
  intrinsic_returntypes:
    begin: '(?=->\s*)'
    end: '(?!\s*(->|,))(?=.)\s*'
    patterns:
    - match: '\s*(->|,)\s*([_A-Za-z][_A-Za-z0-9]*)'
      captures:
        '2':
          name: entity.name.class.magma
    - match: '\s*(->|,)\s*(\[\]|{}|{\[\]}|{@@}|{\*\*}|<>)'

  intrinsic_params:
    begin: '\(\s*'
    end: '\)\s*|(?=:)'
    patterns:
    - include: '#intrinsic_paramtype'
    - include: '#intrinsic_parens'
    - include: '#paramname'

  intrinsic_optparams:
    begin: ':\s*'
    end: '\)\s*'
    patterns:
    - include: '#intrinsic_optparam'
    - include: '#expression'

  intrinsic_optparam:
    match: '\b([_A-Za-z][_A-Za-z0-9]*)\s*:='
    captures:
      '1':
        name: variable.parameter.magma

  intrinsic_parens:
    begin: '\(\s*'
    end: '\)\s*'
    patterns:
    - include: '#intrinsic_parens'

  intrinsic_docstring:
    begin: '{\s*'
    end: '}\s*'
    name: comment.block.documentation.magma
    patterns:
      - match: '\\.'

  paramname:
    match: '[_A-Za-z][_A-Za-z0-9]*'
    name: variable.parameter.magma

  intrinsic_paramtype:
    begin: '(\b[_A-Za-z][_A-Za-z0-9]*)?\s*::\s*'
    end: '(?!\s*([_A-Za-z]|\[|{|\.|<))(?=.)\s*'
    beginCaptures:
      '1':
        name: variable.parameter.magma
    patterns:
    - include: '#type'

  type:
    patterns:
    - include: '#any_type'
    - include: '#simple_type'
    - include: '#sequence_type'
    - include: '#set_type'
    - include: '#setseq_type'
    - include: '#iset_type'
    - include: '#mset_type'
    - include: '#tuple_type'

  any_type:
    match: '\.'
    name: entity.name.class.magma

  simple_type:
    patterns:
    - begin: '([_A-Za-z][_A-Za-z0-9]*)\['
      end: '\]'
      beginCaptures:
        '1':
          name: entity.name.class.magma
      patterns:
      - include: '#type'
    - match: '[_A-Za-z][_A-Za-z0-9]*'
      name: entity.name.class.magma

  sequence_type:
    begin: '\['
    end: '\]'
    patterns:
    - include: '#type'

  set_type:
    begin: '{'
    end: '}'
    patterns:
    - include: '#type'

  setseq_type:
    begin: '{\['
    end: '\]}'
    patterns:
    - include: '#type'

  iset_type:
    begin: '{@'
    end: '@}'
    patterns:
    - include: '#type'

  mset_type:
    begin: '{\*'
    end: '\*}'
    patterns:
    - include: '#type'

  tuple_type:
    begin: '<'
    end: '>'
    patterns:
    - include: '#type'

  line_comment:
    comment: Line comments
    match: '\/\/.*$\n?'
    name: comment.line.double-slash.magma

  block_comment:
    comment: Block comments
    begin: '\/\*'
    end: '\*\/'
    name: comment.block.magma

  comment:
    patterns:
    - include: '#line_comment'
    - include: '#block_comment'

  printf_statement:
    begin: '\b((f?printf)|(Sprintf\()|((vprintf)\b.*:))\s*(")'
    end: '"'
    beginCaptures:
      '2':
        name: keyword.other.magma
      '5':
        name: keyword.other.magma
      '6':
        name: string.quoted.double.magma
    endCaptures:
      '0':
        name: string.quoted.double.magma
    patterns:
    - match: '\\.'
      name: constant.character.escape.magma
    - match: '(%([-]?[0-9]*(\.[0-9]*)?|\*)[oOmh])|(%%)'
      name: constant.character.escape.magma
    - match: '%'
      name: invalid.illegal.magma
    - match: '[^"\\%]'
      name: string.quoted.double.magma

  declare_type_statement:
    match: '(\bdeclare\s+type)\s+([_A-Za-z][_A-Za-z0-9]*)(\s*\[\s*([_A-Za-z][_A-Za-z0-9]*)\s*\])?'
    captures:
      '1':
        name: keyword.other.magma
      '2':
        name: entity.name.class.magma
      '4':
        name: entity.name.class.magma

  declare_attributes_statement:
    match: '(\bdeclare\s+attributes)\s+([_A-Za-z][_A-Za-z0-9]*)(\s*\[\s*([_A-Za-z][_A-Za-z0-9]*)\s*\])?'
    captures:
      '1':
        name: keyword.other.magma
      '2':
        name: entity.name.class.magma
      '4':
        name: entity.name.class.magma


  parens:
    begin: '\('
    end: '\)'
    patterns:
    - include: '#expression'

  brackets:
    begin: '\['
    end: '\]'
    patterns:
    - include: '#expression'

  braces:
    begin: '{'
    end: '}'
    patterns:
    - include: '#expression'

  angles:
    begin: '<'
    end: '>'
    patterns:
    - include: '#expression'

  indexed_set:
    begin: '{@'
    end: '@}'
    patterns:
    - include: '#expression'

  multi_set:
    begin: '{\*'
    end: '\*}'
    patterns:
    - include: '#expression'

  expression_group:
    patterns:
    - include: '#indexed_set'
    - include: '#multi_set'
    - include: '#parens'
    - include: '#brackets'
    - include: '#braces'
    - include: '#angles'

  arrow:
    match: '->|:->'

  string_literal:
    comment: Strings
    begin: '"'
    end: '"'
    name: string.quoted.double.magma
    patterns:
    - match: '\\.'
      name: constant.character.escape.magma
    - match: '[^"\\]'
   
  integer_literal: 
    comment: Numbers
    match: '\b([0-9]+|[0-9]+\.[0-9]+)\b'
    name: constant.numeric.magma

  literal:
    patterns:
    - include: '#string_literal'
    - include: '#integer_literal'

  other_keyword:
    comment: Other keywords
    match: '\b(load|print|printf|fprintf|vprint|vprintf|exists|forall|rep|random|select|where|is|delete|by|Self|freeze|quit|exit|import|assigned|declare|type|attributes)\b'
    name: keyword.other.magma

  logical_operator_keyword:
    comment: Logical operator keywords
    match: '\b(and|not|or)\b'
    name: keyword.operator.bool.logical.magma

  comparison_operator_keyword:
    comment: Comparison operator keywords
    match: '\b(le|lt|ge|gt|eq|ne|cmpeq|cmpne|in|notin|subset|notsubset)\b'
    name: keyword.operator.comparison.magma

  other_operator_keyword:
    comment: Other operator keywords
    match: '\b(div|cat|meet|join|diff|sdiff|mod)\b'
    name: keyword.operator.other.magma

  operator_keyword:
    patterns:
    - include: '#logical_operator_keyword'
    - include: '#comparison_operator_keyword'
    - include: '#other_operator_keyword'

  arithmetic_operator:
    comment: Arithmetic operators
    match: '\+|-|/|\*|\^'
    name: keyword.operator.arithmetic.magma

  assignment_operator:
    comment: Assignment operators
    match: '([_A-Za-z][_A-Za-z0-9,<>\s]*)?\s*((\b(div|cat|meet|join|mod|or|and)|(\+|-|/|\*|^)|)(:=))'
    captures:
      '1':
        name: variable.other.magma
      '2':
        name: keyword.operator.assignment.magma

  other_operator:
    comment: Other operators
    match: '#|&|`|!|@|@@|\.|\.\.|\.\.\.'
    name: keyword.operator.other.magma

  operator:
    patterns:
    - include: '#operator_keyword'
    - include: '#arithmetic_operator'
    - include: '#assignment_operator'
    - include: '#other_operator'

  constant:
    comment: Constants
    match: '\b(true|false)\b'
    name: constant.language.word_like.magma

  constructor_bits:
    match: '->|:->'

  func_constructor:
    begin: '\b(func|proc)\s*<'
    end: '\|'
    beginCaptures:
      '1':
        name: keyword.other.magma
    patterns:
    - match: '[_A-Za-z][_A-Za-z0-9]*'
      name: variable.parameter.magma

  record_constructor:
    match: '\b(rec)\s*<\s*([_A-Za-z][_A-Za-z0-9]*)\b'
    captures:
      '1':
        name: keyword.other.magma
      '2':
        name: entity.name.class.magma

  other_constructor:
    comment: Constructors
    match: '\b([_A-Za-z]+)<'
    captures:
      '1':
        name: keyword.other.magma

  constructor:
    patterns:
    - include: '#constructor_bits'
    - include: '#record_constructor'
    - include: '#func_constructor'
    - include: '#other_constructor'

  expression:
    patterns:
    - include: '#comment'
    - include: '#arrow'
    - include: '#expression_group'
    - include: '#literal'
    - include: '#assignment_operator'
    - include: '#constructor'
    - include: '#other_keyword'
    - include: '#operator'
    - include: '#constant'

  for_keyword:
    comment: Keyword "for"
    match: '\b(for)\s+([_A-Za-z][_A-Za-z0-9]*)\s+(in)\b'
    captures:
      '1':
        name: keyword.control.magma
      '3':
        name: keyword.control.magma

  control_keyword:
    comment: Control keywords
    match: '\b(if|end\s+if|else|then|for|while|end\s+for|end\s+while|do|return|break|continue|raise|assert|try|end\s+try|catch|require|requirerange|requirege|error|repeat|until|case|when|end\s+case|default)\b'
    name: keyword.control.magma

  end_function_keyword:
    comment: End function definition keywords
    match: '\b(end\s+)(function|procedure|intrinsic)\b'
    captures:
      '1':
        name: keyword.other.magma
      '2':
        name: keyword.other.magma

  block:
    patterns:
    - include: '#printf_statement'
    - include: '#declare_type_statement'
    - include: '#declare_attributes_statement'
    - include: '#expression'
    - include: '#for_keyword'
    - include: '#control_keyword'
    - include: '#end_function_keyword'
    - include: '#intrinsic_keyword'
    - include: '#function_keyword'
...