/// SYNTAX TEST "Packages/Magma/magma.sublime-syntax"

// Comments
/// <- comment.line
///       ^ comment.line

/* block comment */
/// <- comment.block
///               ^ comment.block

-124378478e-12p4;
/// <- constant.numeric
///            ^ constant.numeric
///             ^ - constant

"hello there\nx = %o";
/// <- string.quoted.double
///         ^ constant.character.escape
///               ^ constant.character.escape
///                 ^ string
///                  ^ - string

"not a comment: // /*";
/// <- string
///             ^ string
///                ^ string
///                  ^ string
///                   ^ -string

'foo';
/// <- constant.language.symbol

hello;
/// <- meta.identifier

NumberField;
/// <- meta.identifier

true or false and 12 eq 7;
/// <- constant.language.boolean
///  ^ keyword.operator.bool.logical
///     ^ constant.language.boolean
///           ^ keyword.operator.bool.logical
///                  ^ keyword.operator.comparison

print "hello" :Maximal;
/// <- keyword.other
///            ^ keyword.other

printf "% //stuff%o%12o\n", 12; print "hi";
/// <- keyword.other
///    ^ string
///     ^ invalid.illegal
///       ^ string
///              ^ constant.character.escape
///                ^ constant.character.escape
///                     ^ constant.character.escape
///                      ^ string
///                       ^ -string
///                             ^ keyword.other

if foo then
/// <- keyword.other
///    ^ keyword.other
  12;
elif false then
/// <- keyword.other
///  ^ constant.language.boolean
///        ^ keyword.other
  14;
else
/// <- keyword.other
  13;
end if;
/// <- keyword.other
///   ^ -keyword

while false do
/// <- keyword.other
///   ^ constant.language.boolean
///         ^ keyword.other
  print 12;
end while;
/// <- keyword.other

repeat
/// <- keyword.other
  foo();
until false;
/// <- keyword.other

x,y,_ := 12;
///   ^ keyword.operator.assignment

%! this is a system call with no extra syntax (for in print "")
/// <- keyword.other

% 1 12
/// <- keyword.other
  /// <- constant.numeric
/// ^ constant.numeric

%p
/// <- keyword.other

%s 4378
/// <- keyword.other
   /// <- constant.numeric

vprint GaloisGroup, 12: "hello there", x;
/// <- keyword.other
///    ^ entity.name.class.verbosity
///                 ^ constant.numeric
///                     ^ string

vprintf CustomThing: "%o%% done", Round(x*100);
/// <- keyword.other
///     ^ entity.name.class.verbosity
///                  ^ string
///                   ^ constant.character.escape

freeze;
/// <- keyword.other

clear;
/// <- keyword.other

delete x;
/// <- keyword.other

exit;
/// <- keyword.other

quit;
/// <- keyword.other

import "foo": x, y, z;
/// <- keyword.other

time x +:= 12;
/// <- keyword.other
///    ^ keyword.operator.assignment

print hello;
/// <- keyword.other

vtime Foo, 2: DoAThing();
/// <- keyword.other
///   ^ entity.name.class.verbosity

assert false;
/// <- keyword.other

assert2 x eq y;
/// <- keyword.other
///       ^ keyword.operator.comparison

assert3 IsNormal(G,H);
/// <- keyword.other

read name, "what is your name?";
/// <- keyword.other

readi foo;
/// <- keyword.other

local foo;
/// <- keyword.other

forward MyRecursiveThing;
/// <- keyword.other
///     ^ entity.name.function

eval "x +:= 3";
/// <- keyword.other

load "~/my.magma";
/// <- keyword.other

iload "~/my_script.magma";
/// <- keyword.other

save "~/results.magma";
/// <- keyword.other

restore "~/results.magma";
/// <- keyword.other

declare type MyType: MyOtherType;
/// <- keyword.other
///     ^ keyword.other

declare type MyType[foo];
/// <- keyword.other
///     ^ keyword.other
///          ^ entity.name.class
///                 ^ entity.name.class

declare attributes MyType: x, y;
/// <- keyword.other
///     ^ keyword.other
///                ^ entity.name.class

declare verbose MyVerboseLevel, 2;
/// <- keyword.other
///     ^ keyword.other
///             ^ entity.name.class.verbosity
///                             ^ constant.numeric

for x in Subgroups(G) do
/// <- keyword.other
///   ^ keyword.other
///                   ^ keyword.other
  print;
end for;
/// <- keyword.other

for x := 1 to 10 by 2 do
/// <- keyword.other
///   ^ keyword.operator.assignment
///        ^ keyword.other
///              ^ keyword.other
///                   ^ keyword.other
  print x;
end for;
/// <- keyword.other

error "that's no good!";
/// <- keyword.other

try
/// <- keyword.other
  DoAThing();
  error "it went bad!";
catch err
/// <- keyword.other
  print err`Object;
end try;
/// <- keyword.other
/// ^ keyword.other

require false: "this is bad";
/// <- keyword.other

requirerange foo, 0, 100;
/// <- keyword.other

requirege bar, -3;
/// <- keyword.other

function foo(x, y, z : hello := 12, howdy := foo)
/// <- keyword.other
///      ^ entity.name.function.function
///          ^ variable.parameter
///             ^ variable.parameter
///                ^ variable.parameter
///                    ^ variable.parameter
///                                 ^ variable.parameter
  return x + y + z + hello / howdy;
end function;
/// <- keyword.other
/// ^ keyword.other

procedure bar(~a, b : c := false)
/// <- keyword.other
///       ^ entity.name.function.procedure
///           ^ keyword.operator.other
///            ^ variable.parameter
///               ^ variable.parameter
///                   ^ variable.parameter
  a +:= 1;
  print a,b,c;
end procedure;
/// <- keyword.other
/// ^ keyword.other

intrinsic MyIntrinsic
/// <- keyword.other
///       ^ entity.name.function.intrinsic
  (~x :: RngUPolElt[FldNum]   // comment
///^ keyword.operator
/// ^ variable.parameter
///      ^ entity.name.class
///                 ^ entity.name.class
///                           ^ comment.line
  , y :: {RngIntElt}
/// ^ variable.parameter
///      ^ entity.name.class.set
///       ^ entity.name.class
///                ^ entity.name.class.set
  : a := 12 // comment
/// ^ variable.parameter
///      ^ constant.numeric
///         ^ comment.line
  ) -> ., {**}, {@@}, {}, []
///    ^ entity.name.class.any
///       ^ entity.name.class.mset
///             ^ entity.name.class.iset
///                   ^ entity.name.class.set
///                       ^ entity.name.class.seq
  {"}
  /// <- comment.block.documentation.intrinsic
   /// <- constant.character.escape
  Include(~x, a + y);
  return Last(x)[1];
end intrinsic;
/// <- keyword.other
/// ^ keyword.other

x +:= y^2 + z where y,z is Random2();
/// ^ keyword.operator.assignment
///           ^ keyword.other
///           ^ meta.expression.where
///                     ^ keyword.other

break;
/// <- keyword.other

break x;
/// <- keyword.other
///   ^ meta.statement.break

continue;
/// <- keyword.other

continue foo_bar;
/// <- keyword.other
///            ^ meta.statement.continue

case Sign(x):
/// <- keyword.other
when 1, 2, 3:
/// <- keyword.other
  print x, "is positive";
when -1, -2, -3:
/// <- keyword.other
  print x, "is negative";
when 0:
/// <- keyword.other
  print x, "is zero";
else
/// <- keyword.other
  assert false;
end case;
/// <- keyword.other
/// ^ keyword.other

Sprintf("%o%", baz : x := 12);
/// <- meta.identifier.magma
///     ^ string
///                  ^ variable.parameter
///                    ^ keyword.operator.assignment
///                       ^ constant.numeric
///                        ^ meta.operator.function_call

(x + 2);
/// <- -meta.operator.function_call

foo()["badger"][12]`hello.goodbye""foo";
/// <- meta.identifier.magma
///^ meta.operator.function_call
///  ^ meta.operator.indexing
///   ^ string
///            ^ meta.operator.indexing
///             ^ constant.numeric
///                ^ keyword.operator
///                ^ meta.operator.backtick
///                      ^ keyword.operator
///                      ^ meta.operator.dot
///                              ^ keyword.operator
///                              ^ meta.operator.doublequote

"hello" :Magma;
///      ^ keyword.other

myset := {x : x in foo | x ne 12}`hello;
///       ^ meta.expression.set
///             ^ keyword.other
///                             ^ meta.expression.set
///                              ^ keyword.operator

myset := {Rationals() | 1,2,3,4,5};
///      ^ meta.expression.set
///                              ^ meta.expression.set
///                               ^ -meta.expression.set

myseq := [x : x in blah, y in GetStuff()];
///       ^ meta.expression.seq
///             ^ keyword.other
///                        ^ keyword.other

myseq := [Integers() | 1,2,3,4,5];
///      ^ meta.expression.seq
///                             ^ meta.expression.seq
///                              ^ -meta.expression.seq

mymset := {* y : y in blah *};
///       ^ meta.expression.mset
///                ^ keyword.other

mymset := {*RealField() | 1,2,3,4,5*};
///       ^ meta.expression.mset
///                                 ^ meta.expression.mset
///                                  ^ -meta.expression.mset

myiset := {@ z : z in thingy @};
///       ^ meta.expression.iset
///                ^ keyword.other

myiset := {@ComplexField() | 1,2,3,4,5@};
///       ^ meta.expression.iset
///                                    ^ meta.expression.iset
///                                     ^ -meta.expression.iset

t := <x in X, false, 12>;
///  ^ meta.expression.tuple
///     ^ keyword.operator
///           ^ constant.language
///                  ^ constant.numeric

recformat<x,y,z>;
///      ^ meta.operator.constructor

m := hom<F -> K | x :-> 12, y :-> y^2>;
///     ^ meta.operator.constructor
///               ^ variable.other
///                         ^ variable.other
///                                  ^ meta.operator.constructor

if assigned x then
/// <- keyword.other
/// ^ keyword.other
///           ^ keyword.other
  y +:= (eval x) cat [10..100 by 10];
/// ^ keyword.operator.assignment
///      ^ keyword.other
///              ^ keyword.operator
///                  ^ meta.expression.seq
///                     ^ keyword.operator
///                           ^ keyword.operator
end if;
/// <- keyword.other
/// ^ keyword.other

x := forall(a,b,c){x : x in stuff | Foo(x)};
///  ^ keyword.other
///  ^ meta.expression.forall
///                      ^ keyword.other

x := exists(t){x : x in stuff | Foo(x)};
///  ^ keyword.other
///  ^ meta.expression.exists
///                  ^ keyword.other

x := random{x : x in stuff | Foo(x)};
///  ^ keyword.other
///  ^ meta.expression.random
///               ^ keyword.other

x := rep{x : x in stuff | Foo(x)};
///  ^ keyword.other
///  ^ meta.expression.rep
///            ^ keyword.other

case<#G | 1: "one", 2: "two", 3: "three", default: "other">[3];
/// <- keyword.other
/// ^ meta.operator.constructor
///                                       ^ keyword.other
///                                                       ^ meta.operator.constructor
///                                                        ^ -meta.operator.constructor
///                                                        ^ meta.operator.indexing

x := (1,2,3)(4,5,6)(7,8,9).2;
///  ^ meta.expression.parentheses
///                      ^ meta.expression.parentheses
///                       ^ meta.operator.dot